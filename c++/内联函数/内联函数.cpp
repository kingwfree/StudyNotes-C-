#include	<iostream>
#include	<string.h>
using namespace	std;
	
/*
内联特点
1）内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直
接忽略内联请求。
2）C++编译器直接将函数体插入在函数调用的地方 。
3）内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)。
4）内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型
等）。
5） 内联函数由 编译器处理，直接将编译后的函数体插入调用的地方，
 宏代码片段 由预处理器处理， 进行简单的文本替换，没有任何编译过程。
6）C++中内联编译的限制：
28
 不能存在任何形式的循环语句
 不能存在过多的条件判断语句
 函数体不能过于庞大
 不能对函数进行取址操作
 函数内联声明必须在调用语句之前
7）编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优
势只是省去了函数调用时压栈，跳转和返回的开销。因此，当函数体的执行开
销远大于压栈，跳转和返回所用的开销时，那么内联将无意义。

*/

#if	0
优点:内嵌代码,辟免压栈与出栈的开销
缺点:代码替换,易使生成代码体积变大,易产生逻辑错误。
#endif
#define SQR(x) ((x)*(x))

#if	0
优点:高度抽象,避免重复开发
缺点:压栈与出栈,带来开销
#endif
inline int sqr(int x)
{	
	return	x*x;	
}	
int	main()	
{	
	int	i=0;	
	while(i<5)	
	{	
		//printf("%d\n",SQR(i++)); //i-0=0 i-2=4 i-4=16
		printf("%d\n",sqr(i++));	
	}	
	return 0;		
}